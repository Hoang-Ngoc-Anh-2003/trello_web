import Container from '@mui/material/Container'
import BoardBar from './BoardBar/BoardBar'
import BoardContent from './BoardContent/BoardContent'
import AppBar from '~/components/AppBar/AppBar'
import { mockData } from '~/apis/mock_data'
import { useEffect, useState } from 'react'
import { fetchBoardDetailsAPI, createNewCardAPI, createNewColumnAPI, updateBoardDetailsAPI, updateColumnDetailsAPI, moveCardToDifferentColumnAPI } from '~/apis'
import { generatePlaceholderCard } from '~/utils/formatters'
import { isEmpty } from 'lodash'
import { mapOrder } from "~/utils/sorts"
import Box from "@mui/material/Box";
import CircularProgress from '@mui/material/CircularProgress'
import Typography from '@mui/material/Typography'
function Board() {
    const [board, setBoard] = useState(null)

    useEffect(() => {
        //lay id tu url , nen su dung react-router-dom
        const boardId = '67655e4843da9dde923534b3'
        //callAPI
        fetchBoardDetailsAPI(boardId).then((board) => {
            //sap xxep thu tu column trc khi dua xuong component con vid 71
            board.columns = mapOrder(board.columns, board.columnOrderIds, '_id')
            // Khi F5 trang web th√¨ c·∫ßn x·ª≠ l√Ω v·∫•n ƒë·ªÅ k√©o th·∫£ v√†o m·ªôt column r·ªóng (Nh·ªõ l·∫°i video 37.2, code hi·ªán t·∫°i l√† video 69)
            board.columns.forEach(column => {
                if (isEmpty(column.cards)) {
                    column.cards = [generatePlaceholderCard(column)]
                    column.cardOrderIds = [generatePlaceholderCard(column)._id]
                } else { //sap xxep thu tu column trc khi dua xuong component con vid 71
                    column.cards = mapOrder(column.cards, column.cardOrderIds, "_id")
                }
            })
            setBoard(board)
        })
    }, [])


    // Func n√†y c√≥ nhi·ªám v·ª• g·ªçi API t·∫°o m·ªõi Column v√† l√†m l·∫°i d·ªØ li·ªáu State Board
    const createNewColumn = async (newColumnData) => {
        const createdColumn = await createNewColumnAPI({
            ...newColumnData,
            boardId: board._id
        })
        console.log('createdColumn:', createdColumn)

        // Khi t·∫°o column m·ªõi th√¨ n√≥ s·∫Ω ch∆∞a c√≥ card, c·∫ßn x·ª≠ l√Ω v·∫•n ƒë·ªÅ k√©o th·∫£ v√†o m·ªôt column r·ªóng (Nh√≥ l·∫°i video 37.2, code hi·ªán t·∫°i l√† video 69)
        createdColumn.cards = [generatePlaceholderCard(createdColumn)]
        createdColumn.cardOrderIds = [generatePlaceholderCard(createdColumn)._id]

        // C·∫≠p nh·∫≠t state board
        /**
         * - Ph√≠a Front-end ch√∫ng ta ph·∫£i t·ª± l√†m ƒë√∫ng l·∫°i state data board (thay v√¨ ph·∫£i g·ªçi l·∫°i api fetchBoardDetailsAPI)
         * - L∆∞u √Ω: c√°ch l√†m n√†y ph·ª• thu·ªôc v√†o t√πy l·ª±a ch·ªçn v√† ƒë·∫∑c th√π d·ª± √°n, c√≥ n∆°i th√¨ Back-end s·∫Ω h·ªó tr·ª£ tr·∫£ v·ªÅ lu√¥n to√†n b·ªô Board d√π ƒë√¢y c√≥ l√† api t·∫°o Column hay Card ƒëi chƒÉng n·ªØa. => L√∫c n√†y Front-end s·∫Ω nh√†n h∆°n
         */
        const newBoard = { ...board }
        newBoard.columns.push(createdColumn)
        newBoard.columnOrderIds.push(createdColumn._id)
        setBoard(newBoard)
    }

    // Func n√†y c√≥ nhi·ªám v·ª• g·ªçi API t·∫°o m·ªõi Card v√† l√†m l·∫°i d·ªØ li·ªáu State Board
    const createNewCard = async (newCardData) => {
        const createdCard = await createNewCardAPI({
            ...newCardData,
            boardId: board._id
        })
        console.log('createdCard:', createdCard)

        // C·∫≠p nh·∫≠t state board
        const newBoard = { ...board }
        const columnToUpdate = newBoard.columns.find(column => column._id === createdCard.columnId)
        if (columnToUpdate) {
            //neu column rong: ban chat la no dang chua 1 place-ordercard
            if (columnToUpdate.cards.some(card => card.FE_PlaceholderCard )){
                columnToUpdate.cards = [createdCard]
                columnToUpdate.cardOrderIds=[createdCard._id]
            }
            else{
                columnToUpdate.cards.push(createdCard)
                columnToUpdate.cardOrderIds.push(createdCard._id)
            }
        }
        setBoard(newBoard)
    }
    //func nay co nhiem vu goi API khi da keo tha columns xong xuoi
    const moveColumns = (dndOrderedColumns) => {
        // Update cho chu·∫©n d·ªØ li·ªáu state Board
        const dndOrderedColumnsIds = dndOrderedColumns.map((c) => c._id)
        const newBoard = { ...board }
        newBoard.columns = dndOrderedColumns
        newBoard.columnOrderIds = dndOrderedColumnsIds
        setBoard(newBoard)

        // G·ªçi API update Board
        updateBoardDetailsAPI(newBoard._id, {
            columnOrderIds: dndOrderedColumnsIds
        })
    }

    const moveCardInTheSameColumn = (
        dndOrderedCards,
        dndOrderedCardIds,
        columnId
    ) => {
        // Update cho chu·∫©n d·ªØ li·ªáu state Board
        const newBoard = { ...board }
        const columnToUpdate = newBoard.columns.find(
            (column) => column._id === columnId
        )
        if (columnToUpdate) {
            columnToUpdate.cards = dndOrderedCards
            columnToUpdate.cardOrderIds = dndOrderedCardIds
        }
        setBoard(newBoard)

        // // G·ªçi API update Column
        updateColumnDetailsAPI(columnId, { cardOrderIds: dndOrderedCardIds })
    }

    // const moveCardToDifferentColumn = (
    //     currentCardId,
    //     prevColumnId,
    //     nextColumnId,
    //     dndOrderedColumns
    // ) => {
    //     console.log(
    //         'üöÄ ~ moveCardBetweenDifferentColumns ~ dndOrderedColumns:',
    //         dndOrderedColumns
    //     )
    //     console.log(
    //         'üöÄ ~ moveCardBetweenDifferentColumns ~ nextColumnId:',
    //         nextColumnId
    //     )
    //     console.log(
    //         'üöÄ ~ moveCardBetweenDifferentColumns ~ prevColumnId:',
    //         prevColumnId
    //     )
    //     console.log(
    //         'üöÄ ~ moveCardBetweenDifferentColumns ~ currentCardId:',
    //         currentCardId
    //     )
    //     // Update cho chu·∫©n d·ªØ li·ªáu state Board
    //     const dndOrderedColumnsIds = dndOrderedColumns.map((c) => c._id)
    //     const newBoard = { ...board }
    //     newBoard.columns = dndOrderedColumns
    //     newBoard.columnOrderIds = dndOrderedColumnsIds
    //     setBoard(newBoard)
    //     //// G·ªçi API x·ª≠ l√Ω ph√≠a BE
    //     let prevCardOrderIds = dndOrderedColumns.find(
    //         (c) => c._id === prevColumnId
    //     )?.cardOrderIds

    //     // console.log(
    //     //     ' moveCardBetweenDifferentColumns ~ prevCardOrderIds:',
    //     //     prevCardOrderIds
    //     // )

    //     // X·ª≠ l√Ω v·∫•n ƒë·ªÅ khi k√©o Card cu·ªëi c√πng ra kh·ªèi Column, Column r·ªóng s·∫Ω c√≥ placeholder-card, c·∫ßn x√≥a n√≥ ƒëi tr∆∞·ªõc khi g·ª≠i d·ªØ li·ªáu l√™n cho ph√≠a BE. (Nh·ªõ l·∫°i video 37.2)
    //     if (prevCardOrderIds[0].includes('placeholder-card')) { prevCardOrderIds = [] }

    //     // console.log(
    //     //     ' moveCardBetweenDifferentColumns ~ prevCardOrderIds:',
    //     //     prevCardOrderIds
    //     // )

    //     moveCardToDifferentColumnAPI({
    //         currentCardId,
    //         prevColumnId,
    //         prevCardOrderIds: dndOrderedColumns.find(c => c._id === prevColumnId)?.cardOrderIds,
    //         nextColumnId,
    //         nextCardOrderIds: dndOrderedColumns.find(c => c._id === nextColumnId)?.cardOrderIds
    //     })
    // }
    const moveCardToDifferentColumn = (
        currentCardId,
        prevColumnId,
        nextColumnId,
        dndOrderedColumns
    ) => {
        console.log(
            'üöÄ ~ moveCardToDifferentColumn ~ dndOrderedColumns:',
            dndOrderedColumns
        )
        console.log(
            'üöÄ ~ moveCardToDifferentColumn ~ nextColumnId:',
            nextColumnId
        )
        console.log(
            'üöÄ ~ moveCardToDifferentColumn ~ prevColumnId:',
            prevColumnId
        )
        console.log(
            'üöÄ ~ moveCardToDifferentColumn ~ currentCardId:',
            currentCardId
        )
        // Update cho chu·∫©n d·ªØ li·ªáu state Board
        const dndOrderedColumnsIds = dndOrderedColumns.map((c) => c._id)
        const newBoard = { ...board }
        newBoard.columns = dndOrderedColumns
        newBoard.columnOrderIds = dndOrderedColumnsIds
        setBoard(newBoard)

        // G·ªçi API x·ª≠ l√Ω ph√≠a BE
        let prevCardOrderIds = dndOrderedColumns.find(
            (c) => c._id === prevColumnId
        )?.cardOrderIds

        // Lo·∫°i b·ªè "placeholder-card" n·∫øu c√≥ trong cardOrderIds
        if (prevCardOrderIds && prevCardOrderIds[0]?.includes('placeholder-card')) {
            prevCardOrderIds = []
        }

        // C·∫≠p nh·∫≠t "nextCardOrderIds"
        const nextCardOrderIds = dndOrderedColumns.find(c => c._id === nextColumnId)?.cardOrderIds

        // G·ªçi API
        moveCardToDifferentColumnAPI({
            currentCardId,
            prevColumnId,
            prevCardOrderIds,
            nextColumnId,
            nextCardOrderIds
        })
    }


    if (!board) {
        return (
            <Box
                sx={{
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    gap: 2,
                    width: '100vw',
                    height: '100vh'
                }}
            >
                <CircularProgress />
                <Typography>Loading Board...</Typography>
            </Box>
        )
    }



    return (
        <Container disableGutters maxWidth={false} sx={{ height: '100vh', display: 'flex', flexDirection: 'column', backgroundColor: 'primary.main' }}>
            <AppBar />
            <BoardBar board={board} />
            <BoardContent
                board={board}
                createNewColumn={createNewColumn}
                createNewCard={createNewCard}
                moveColumns={moveColumns}
                moveCardInTheSameColumn={moveCardInTheSameColumn}
                moveCardToDifferentColumn={moveCardToDifferentColumn} />
        </Container>
    )
}

export default Board
